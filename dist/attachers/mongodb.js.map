{"version":3,"sources":["../../app/attachers/mongodb.js"],"names":["module","exports","MongoDB","create","queue_name","schema_name","current_service","service_to","schema","amqp","options","_attachToAmqp","doc","actions","send","update","delete","method","action","self","Promise","resolve","post","next","console","log","_populator","_depopulator","_getCurrentServiceToOptions","each","populate","value","execPopulate","depopulate","data","filter","isPlainObject","name"],"mappings":"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","file":"mongodb.js","sourcesContent":["// const Bind = require('./bind.js')\r\nimport Bind from './bind.js'\r\nimport _ from 'lodash'\r\n\r\nmodule.exports = class MongoDB extends Bind{\r\n    \r\n    create(queue_name, schema_name, current_service, service_to, schema, amqp, options){\r\n        return this._attachToAmqp(queue_name, schema_name, current_service, service_to, schema, amqp, options, 'save', async(queue_name, doc)=>{\r\n            await amqp.actions.send(queue_name, doc);\r\n        })\r\n    }\r\n    \r\n    update(queue_name, schema_name, current_service, service_to, schema, amqp, options){\r\n        return this._attachToAmqp(queue_name, schema_name, current_service, service_to, schema, amqp, options, 'update', async(queue_name, doc)=>{\r\n            await amqp.actions.send(queue_name, doc)\r\n        })\r\n    }\r\n    \r\n    delete(queue_name, schema_name, current_service, service_to, schema, amqp, options){\r\n        return this._attachToAmqp(queue_name, schema_name, current_service, service_to, schema, amqp, options, 'remove', async(queue_name, doc)=>{\r\n            await amqp.actions.send(queue_name, doc);\r\n        })\r\n    }\r\n    \r\n    _attachToAmqp(queue_name, schema_name, current_service, service_to, schema, amqp, options, method, action){\r\n        let self = this;\r\n        return new Promise(async (resolve)=>{\r\n            schema.post(method, async function(doc, next){\r\n                console.log(service_to);\r\n\r\n                await self._populator(doc, options, service_to)\r\n                await action(queue_name, doc)\r\n                await self._depopulator(doc, options, service_to);\r\n\r\n                next();\r\n                resolve();\r\n            })\r\n        })\r\n    }\r\n    \r\n    async _populator(doc, options, service_to){\r\n        // console.log(this._getCurrentServiceToOptions(options, service_to));\r\n        options = this._getCurrentServiceToOptions(options, service_to);\r\n        if(options){\r\n            _.each(options.populate, async value=>{\r\n                await doc.populate(value)\r\n            })\r\n            await doc.execPopulate();\r\n        }\r\n    }\r\n\r\n    async _depopulator(doc, options, service_to){\r\n        options = this._getCurrentServiceToOptions(options, service_to);\r\n        if(options){\r\n            _.each(options.populate, async value=>{\r\n                await doc.depopulate(value)\r\n            })\r\n        }\r\n    }\r\n    \r\n    _getCurrentServiceToOptions(options, service_to){\r\n        let data =  _(options)\r\n        .filter(_.isPlainObject)\r\n        .filter(value => value.populate)\r\n        .filter(value => value.name == service_to)\r\n        .value()\r\n        if(data[0]){\r\n            return data[0]\r\n        }else{\r\n            return null\r\n        }\r\n    }\r\n    \r\n}"]}