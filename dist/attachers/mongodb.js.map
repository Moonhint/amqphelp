{"version":3,"sources":["../../app/attachers/mongodb.js"],"names":["module","exports","MongoDB","create","queue_name","schema","amqp","Promise","resolve","reject","pre","next","actions","send","update","post","doc","id","_conditions","_id","_update","delete"],"mappings":";;AACA;;;;;;2cADA;;;AAGAA,OAAOC,OAAP,GAAiB,MAAMC,OAAN,wBAA0B;;AAEvCC,WAAOC,UAAP,EAAmBC,MAAnB,EAA2BC,IAA3B,EAAgC;AAC5B,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAClCJ,mBAAOK,GAAP,CAAW,MAAX;AAAA,6CAAmB,WAAeC,IAAf,EAAoB;AACnC,0BAAML,KAAKM,OAAL,CAAaC,IAAb,CAAkBT,UAAlB,EAA8B,IAA9B,CAAN;AACAO;AACAH;AACH,iBAJD;;AAAA;AAAA;AAAA;AAAA;AAKH,SANM,CAAP;AAOH;;AAEDM,WAAOV,UAAP,EAAmBC,MAAnB,EAA2BC,IAA3B,EAAgC;AAC5B,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAClCJ,mBAAOU,IAAP,CAAY,QAAZ;AAAA,8CAAsB,WAAeC,GAAf,EAAoBL,IAApB,EAAyB;AAC3C,0BAAML,KAAKM,OAAL,CAAaC,IAAb,CAAkBT,UAAlB,EAA8B;AAChCa,4BAAI,KAAKC,WAAL,CAAiBC,GADW;AAEhCL,gCAAQ,KAAKM;AAFmB,qBAA9B,CAAN;AAIAT;AACAH;AACH,iBAPD;;AAAA;AAAA;AAAA;AAAA;AAQH,SATM,CAAP;AAUH;;AAEDa,WAAOjB,UAAP,EAAmBC,MAAnB,EAA2BC,IAA3B,EAAgC;AAC5B,eAAO,IAAIC,OAAJ;AAAA,0CAAY,WAAOC,OAAP,EAAiB;AAChCH,uBAAOU,IAAP,CAAY,QAAZ;AAAA,kDAAsB,WAAeC,GAAf,EAAoBL,IAApB,EAAyB;AAC3C,8BAAML,KAAKM,OAAL,CAAaC,IAAb,CAAkBT,UAAlB,EAA8B,IAA9B,CAAN;AACAO;AACAH;AACH,qBAJD;;AAAA;AAAA;AAAA;AAAA;AAKH,aANM;;AAAA;AAAA;AAAA;AAAA,aAAP;AAOH;;AAjCsC,CAA3C","file":"mongodb.js","sourcesContent":["// const Bind = require('./bind.js')\r\nimport Bind from './bind.js'\r\n\r\nmodule.exports = class MongoDB extends Bind{\r\n    \r\n    create(queue_name, schema, amqp){\r\n        return new Promise((resolve, reject)=>{\r\n            schema.pre('save', async function(next){\r\n                await amqp.actions.send(queue_name, this)\r\n                next();\r\n                resolve();\r\n            })\r\n        })\r\n    }\r\n    \r\n    update(queue_name, schema, amqp){\r\n        return new Promise((resolve, reject)=>{\r\n            schema.post('update', async function(doc, next){\r\n                await amqp.actions.send(queue_name, {\r\n                    id: this._conditions._id,\r\n                    update: this._update\r\n                })\r\n                next();\r\n                resolve();\r\n            })\r\n        })\r\n    }\r\n    \r\n    delete(queue_name, schema, amqp){\r\n        return new Promise(async (resolve)=>{\r\n            schema.post('remove', async function(doc, next){\r\n                await amqp.actions.send(queue_name, this);\r\n                next();\r\n                resolve();\r\n            })\r\n        })\r\n    }\r\n    \r\n}"]}