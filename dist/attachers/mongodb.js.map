{"version":3,"sources":["../../app/attachers/mongodb.js"],"names":["module","exports","MongoDB","create","queue_name","schema_name","current_service","service_to","schema","amqp","options","_attachToAmqp","update","delete","_sendToAmqp","doc","actions","send","method","self","Promise","resolve","post","next","_populator","_depopulator","_getCurrentServiceToOptions","each","populate","value","execPopulate","field_to_populate","depopulate","data","filter","isPlainObject","name"],"mappings":"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","file":"mongodb.js","sourcesContent":["// const Bind = require('./bind.js')\r\nimport Bind from './bind.js'\r\nimport _ from 'lodash'\r\n\r\nmodule.exports = class MongoDB extends Bind{\r\n    \r\n    create(queue_name, schema_name, current_service, service_to, schema, amqp, options){\r\n        return this._attachToAmqp(queue_name, schema_name, current_service, service_to, schema, amqp, options, 'save')\r\n    }\r\n    \r\n    update(queue_name, schema_name, current_service, service_to, schema, amqp, options){\r\n        return this._attachToAmqp(queue_name, schema_name, current_service, service_to, schema, amqp, options, 'update')\r\n    }\r\n    \r\n    delete(queue_name, schema_name, current_service, service_to, schema, amqp, options){\r\n        return this._attachToAmqp(queue_name, schema_name, current_service, service_to, schema, amqp, options, 'remove')\r\n    }\r\n    \r\n    async _sendToAmqp(amqp, queue_name, doc){\r\n        await amqp.actions.send(queue_name, doc);\r\n    }\r\n    \r\n    _attachToAmqp(queue_name, schema_name, current_service, service_to, schema, amqp, options, method){\r\n        let self = this;\r\n        return new Promise(async (resolve)=>{\r\n            schema.post(method, async function(doc, next){\r\n                \r\n                await self._populator(doc, options, service_to)\r\n                await self._sendToAmqp(queue_name, doc)\r\n                await self._depopulator(doc, options, service_to);\r\n                \r\n                next();\r\n                resolve();\r\n            })\r\n        })\r\n    }\r\n    \r\n    async _populator(doc, options, service_to){\r\n\r\n        options = this._getCurrentServiceToOptions(options, service_to);\r\n\r\n        if(options){\r\n            _.each(options.populate, async value=>{\r\n                await doc.populate(value)\r\n            })\r\n            await doc.execPopulate();\r\n        }\r\n    }\r\n    \r\n    async _depopulator(doc, options, service_to){\r\n\r\n        options = this._getCurrentServiceToOptions(options, service_to);\r\n\r\n        if(options){\r\n            _.each(options.populate, async field_to_populate=>{\r\n                await doc.depopulate(field_to_populate)\r\n            })\r\n        }\r\n    }\r\n    \r\n    _getCurrentServiceToOptions(options, service_to){\r\n        let data =  _(options)\r\n        .filter(_.isPlainObject)\r\n        .filter(value => value.populate)\r\n        .filter(value => value.name == service_to)\r\n        .value()[0]\r\n        if(data){\r\n            return data\r\n        }else{\r\n            return null\r\n        }\r\n    }\r\n    \r\n}"]}