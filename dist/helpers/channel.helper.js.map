{"version":3,"sources":["../../app/helpers/channel.helper.js"],"names":["MessagingChannel","constructor","ampql","utils","require","retry_time","channel","connection","create","hostname","broker_user","broker_pass","retry_connection_time","retry_limit","process","env","NODE_ENV","console","info","Error","amqp_path","retry_connection","connect","e","isOperational","createChannel","sleep"],"mappings":";;;;;;;;AAAO,MAAMA,gBAAN,CAAuB;;AAE5B;AACAC,cAAY,EAAEC,KAAF,EAASC,KAAT,KAAmB,EAA/B,EAAmC;AACjC;AACA,SAAKD,KAAL,GAAaA,SAASE,QAAQ,SAAR,CAAtB;;AAEA;AACA,SAAKD,KAAL,GAAaA,KAAb;;AAEA;AACA,SAAKE,UAAL,GAAkB,CAAlB;AACA,SAAKC,OAAL;AACA,SAAKC,UAAL;AACD;;AAEKC,QAAN,CAAaC,WAAS,IAAtB,EAA4BC,cAAY,IAAxC,EAA8CC,cAAY,IAA1D,EAAgEC,qBAAhE,EAAuFC,WAAvF,EAAoG;AAAA;;AAAA;AAClG,UAAKC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAA9B,EAAuC;AACrCH,sBAAcA,eAAe,CAA7B;AACD,OAFD,MAEK;AACHA,sBAAcA,eAAe,CAA7B;AACD;;AAED,UAAI,MAAKR,UAAL,GAAkB,CAAtB,EAAwB;AACtB,YAAIS,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqCC,QAAQC,IAAR,CAAc,SAAQ,MAAKb,UAAW,uBAAtC;AACtC;;AAED,UAAII,aAAa,IAAjB,EAAsB;AACpB,cAAM,IAAIU,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,UAAIT,gBAAgB,IAAhB,IAAwBC,gBAAgB,IAA5C,EAAiD;AAC/C,cAAM,IAAIQ,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,YAAMC,YAAa,UAASV,WAAY,IAAGC,WAAY,IAAGF,QAAS,EAAnE;;AAEA,UAAIY,mBAAmB,KAAvB;;AAEA,UAAI;AACF,cAAKd,UAAL,GAAkB,MAAM,MAAKL,KAAL,CAAWoB,OAAX,CAAmBF,SAAnB,CAAxB;AACD,OAFD,CAEE,OAAOG,CAAP,EAAU;AACV,YAAIA,EAAEC,aAAN,EAAoB;AAClBH,6BAAmB,IAAnB;AACD,SAFD,MAEK;AACH,gBAAME,CAAN;AACD;AACF;;AAED,UAAI,MAAKhB,UAAT,EAAoB;AAClB,YAAI;AACF,gBAAKD,OAAL,GAAe,MAAM,MAAKC,UAAL,CAAgBkB,aAAhB,EAArB;AACA,iBAAO,MAAKnB,OAAZ;AACD,SAHD,CAGE,OAAOiB,CAAP,EAAU;AACV,gBAAMA,CAAN;AACD;AACF,OAPD,MAOK;AACH;AACA,YAAIF,oBAAqB,MAAKhB,UAAL,GAAkBQ,WAA3C,EAAyD;AACvD,gBAAKR,UAAL;;AAEA,gBAAM,MAAKF,KAAL,CAAWuB,KAAX,CAAiBd,qBAAjB,EAAwC,yBAAxC,CAAN;AACA,gBAAKN,OAAL,GAAe,MAAM,MAAKE,MAAL,CAAYC,QAAZ,EAAsBC,WAAtB,EAAmCC,WAAnC,EAAgDC,qBAAhD,EAAuEC,WAAvE,CAArB;AACA,iBAAO,MAAKP,OAAZ;AAED,SAPD,MAOK;AACH,cAAI,MAAKD,UAAL,GAAkB,CAAtB,EAAwB;AACtB,kBAAM,IAAIc,KAAJ,CAAW,wCAAuC,MAAKd,UAAW,QAAlE,CAAN;AACD,WAFD,MAEK;AACH,kBAAM,IAAIc,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF;AACF;AAxDiG;AA0DnG;;AA1E2B,C,QAAjBnB,gB,GAAAA,gB;AA4EZ","file":"channel.helper.js","sourcesContent":["export class MessagingChannel {\n\n  // Depedency Injection:\n  constructor({ ampql, utils } = {}) {\n    // AMQP (Advanced Message Queuing Protocol) client with promise response\n    this.ampql = ampql || require('amqplib');\n\n    // messaging utilities function helper\n    this.utils = utils;\n\n    // other tracked parameters\n    this.retry_time = 0;\n    this.channel;\n    this.connection;\n  }\n\n  async create(hostname=null, broker_user=null, broker_pass=null, retry_connection_time, retry_limit) {\n    if ( process.env.NODE_ENV === \"test\" ) {\n      retry_limit = retry_limit || 0;\n    }else{\n      retry_limit = retry_limit || 3;\n    }\n\n    if (this.retry_time > 0){\n      if (process.env.NODE_ENV !== \"test\") console.info(`Retry ${this.retry_time} connecting to broker`);\n    }\n\n    if (hostname === null){\n      throw new Error(\"broker host is required!\");\n    }\n\n    if (broker_user === null || broker_pass === null){\n      throw new Error(\"broker user and password is required!\");\n    }\n\n    const amqp_path = `amqp://${broker_user}:${broker_pass}@${hostname}`;\n\n    let retry_connection = false;\n\n    try {\n      this.connection = await this.ampql.connect(amqp_path);\n    } catch (e) {\n      if (e.isOperational){\n        retry_connection = true;\n      }else{\n        throw e;\n      }\n    }\n\n    if (this.connection){\n      try {\n        this.channel = await this.connection.createChannel();\n        return this.channel;\n      } catch (e) {\n        throw e;\n      }\n    }else{\n      // do retry\n      if (retry_connection && (this.retry_time < retry_limit)) {\n        this.retry_time++;\n\n        await this.utils.sleep(retry_connection_time, 'Retry broker connection');\n        this.channel = await this.create(hostname, broker_user, broker_pass, retry_connection_time, retry_limit);\n        return this.channel;\n\n      }else{\n        if (this.retry_time > 0){\n          throw new Error(`failed to create channel after retry ${this.retry_time} times`);\n        }else{\n          throw new Error('failed to create channel');\n        }\n      }\n    }\n\n  }\n\n};\n"]}