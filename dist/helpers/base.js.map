{"version":3,"sources":["../../app/helpers/base.js"],"names":["module","exports","Base","constructor","settings","utils","messagingChannel","actions","MessagingChannel","statuses","_attacher","service_name","process","env","npm_package_name","registerServiceName","registerAttacher","name","attacher","push","model","attacher_name","schema_name","schema","services_to","Error","findLast","self","map","service","create","update","delete","modelReceive","receiver","_init"],"mappings":";;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;;;AAEAA,OAAOC,OAAP,GAAkB,MAAMC,IAAN,CAAU;AACxBC,gBAAY,EAACC,QAAD,EAAZ,EAAuB;AACnB,aAAKC,KAAL,GAAa,yBAAb;AACA,aAAKD,QAAL,GAAgBA,QAAhB;AACA,aAAKE,gBAAL,GAAwB,8BAAqB,EAAED,OAAO,KAAKA,KAAd,EAArB,CAAxB;AACA,aAAKE,OAAL,GAAe,4BAAoB,EAAEH,UAAU,KAAKA,QAAjB,EAA2BC,OAAO,KAAKA,KAAvC,EAA8CG,kBAAkB,KAAKF,gBAArE,EAApB,CAAf;AACA,aAAKG,QAAL;AACA,aAAKC,SAAL,GAAiB,EAAjB;AACA,aAAKC,YAAL,GAAoBC,QAAQC,GAAR,CAAYC,gBAAhC;AACH;;AAED;;;AAGAC,wBAAoBJ,YAApB,EAAiC;AAC7B,eAAO,KAAKA,YAAL,GAAoBA,YAA3B;AACH;;AAED;;;;;;AAMAK,qBAAiBC,IAAjB,EAAuBC,QAAvB,EAAgC;AAC5B,aAAKR,SAAL,CAAeS,IAAf,CAAoB;AAChBF,gBADgB;AAEhBC;AAFgB,SAApB;AAIH;;AAED;;;;;;;AAOAE,UAAMC,aAAN,EAAqBC,WAArB,EAAkCC,MAAlC,EAA0CC,WAA1C,EAAsD;AAClD,YAAG,CAACH,aAAJ,EAAkB;AACd,kBAAM,IAAII,KAAJ,CAAU,wBAAV,CAAN;AACH;AACD,YAAG,CAACH,WAAJ,EAAgB;AACZ,kBAAM,IAAIG,KAAJ,CAAU,sBAAV,CAAN;AACH;AACD,YAAG,CAACF,MAAJ,EAAW;AACP,kBAAM,IAAIE,KAAJ,CAAU,iBAAV,CAAN;AACH;AACD,YAAG,CAACD,WAAJ,EAAgB;AACZ,kBAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACH;AACD,YAAIP,WAAW,iBAAEQ,QAAF,CAAW,KAAKhB,SAAhB,EAA2B,EAACO,MAAMI,aAAP,EAA3B,CAAf;AACA,YAAIM,OAAO,IAAX;AACA,yBAAEC,GAAF,CAAMJ,WAAN,EAAmBK,WAAS;AACxBX,qBAASA,QAAT,CAAkBY,MAAlB,CAA0B,UAASR,WAAY,SAAQ,KAAKX,YAAa,QAAOkB,OAAQ,EAAxF,EAA2FN,MAA3F,EAAmGI,IAAnG;AACAT,qBAASA,QAAT,CAAkBa,MAAlB,CAA0B,UAAST,WAAY,SAAQ,KAAKX,YAAa,QAAOkB,OAAQ,EAAxF,EAA2FN,MAA3F,EAAmGI,IAAnG;AACAT,qBAASA,QAAT,CAAkBc,MAAlB,CAA0B,UAASV,WAAY,SAAQ,KAAKX,YAAa,QAAOkB,OAAQ,EAAxF,EAA2FN,MAA3F,EAAmGI,IAAnG;AACH,SAJD;AAKH;;AAED;;;AAGAM,iBAAaC,QAAb,EAAsB;AAClBA,iBAASC,KAAT,CAAe,IAAf;AACH;;AAjEuB,CAA5B","file":"base.js","sourcesContent":["import statuses               from './statuses.helper';\r\nimport { MessagingChannel }   from './channel.helper';\r\nimport { MessagingAction }    from './action.helper';\r\nimport { MessagingUtil }      from './util.helper';\r\nimport _ from 'lodash'\r\n\r\nmodule.exports  = class Base{\r\n    constructor({settings}){\r\n        this.utils = new MessagingUtil();\r\n        this.settings = settings;\r\n        this.messagingChannel = new MessagingChannel({ utils: this.utils });\r\n        this.actions = new MessagingAction({ settings: this.settings, utils: this.utils, MessagingChannel: this.messagingChannel });\r\n        this.statuses = statuses;\r\n        this._attacher = [];\r\n        this.service_name = process.env.npm_package_name;\r\n    }\r\n    \r\n    /** \r\n     * Register the current service name\r\n    */\r\n    registerServiceName(service_name){\r\n        return this.service_name = service_name;\r\n    }\r\n\r\n    /**\r\n     * Add attacher to singleton\r\n     * \r\n     * @param {string} name Attachers name\r\n     * @param {object} attacher Object \r\n     */\r\n    registerAttacher(name, attacher){\r\n        this._attacher.push({\r\n            name,\r\n            attacher\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Model to send\r\n     * \r\n     * @param {string} attacher_name \r\n     * @param {string} schema Model schema\r\n     * @param {string} services Services to send the message to\r\n     */\r\n    model(attacher_name, schema_name, schema, services_to){\r\n        if(!attacher_name){\r\n            throw new Error('Attacher name is empty')\r\n        }\r\n        if(!schema_name){\r\n            throw new Error('Schema name is empty')\r\n        }\r\n        if(!schema){\r\n            throw new Error('Schema is empty')\r\n        }\r\n        if(!services_to){\r\n            throw new Error('Services to send is empty')\r\n        }\r\n        let attacher = _.findLast(this._attacher, {name: attacher_name})\r\n        let self = this;\r\n        _.map(services_to, service=>{\r\n            attacher.attacher.create(`create_${schema_name}_from_${this.service_name}_for_${service}`, schema, self)\r\n            attacher.attacher.update(`update_${schema_name}_from_${this.service_name}_for_${service}`, schema, self)\r\n            attacher.attacher.delete(`delete_${schema_name}_from_${this.service_name}_for_${service}`, schema, self)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Receiver from model entity\r\n     */\r\n    modelReceive(receiver){\r\n        receiver._init(this);\r\n    }\r\n    \r\n}"]}