{"version":3,"sources":["../../app/helpers/base.js"],"names":["module","exports","Base","constructor","settings","utils","messagingChannel","actions","MessagingChannel","statuses","_attacher","service_name","process","env","npm_package_name","_getAttacher","attacher_name","findLast","name","registerServiceName","registerAttacher","attacher","push","model","schema_name","schema","services_to","Error","options","_servicesToMapper","_attachToAttacher","self","current_service","map","service","create","update","delete","isPlainObject","value","modelReceive","receiver","_init"],"mappings":"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","file":"base.js","sourcesContent":["import statuses               from './statuses.helper';\r\nimport { MessagingChannel }   from './channel.helper';\r\nimport { MessagingAction }    from './action.helper';\r\nimport { MessagingUtil }      from './util.helper';\r\nimport _ from 'lodash'\r\n\r\nmodule.exports  = class Base{\r\n    constructor({settings}){\r\n        this.utils = new MessagingUtil();\r\n        this.settings = settings;\r\n        this.messagingChannel = new MessagingChannel({ utils: this.utils });\r\n        this.actions = new MessagingAction({ settings: this.settings, utils: this.utils, MessagingChannel: this.messagingChannel });\r\n        this.statuses = statuses;\r\n        this._attacher = [];\r\n        this.service_name = process.env.npm_package_name;\r\n    }\r\n\r\n    _getAttacher(attacher_name){\r\n        return _.findLast(this._attacher, { name: attacher_name })\r\n    }\r\n    \r\n    /** \r\n     * Register the current service name\r\n    */\r\n    registerServiceName(service_name){\r\n        return this.service_name = service_name;\r\n    }\r\n\r\n    /**\r\n     * Add attacher to singleton\r\n     * \r\n     * @param {string} name Attachers name\r\n     * @param {object} attacher Object \r\n     */\r\n    registerAttacher(name, attacher){\r\n        this._attacher.push({\r\n            name,\r\n            attacher\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Model to send\r\n     * \r\n     * @param {string} attacher_name \r\n     * @param {string} schema Model schema\r\n     * @param {string} services Services to send the message to\r\n     */\r\n    model(attacher_name, schema_name, schema, services_to){\r\n        if(!attacher_name){\r\n            throw new Error('Attacher name is empty')\r\n        }\r\n        if(!schema_name){\r\n            throw new Error('Schema name is empty')\r\n        }\r\n        if(!schema){\r\n            throw new Error('Schema is empty')\r\n        }\r\n        if(!services_to){\r\n            throw new Error('Services to send is empty')\r\n        }\r\n        let attacher = this._getAttacher(attacher_name);\r\n\r\n        let options = services_to;\r\n        services_to = this._servicesToMapper(services_to);\r\n\r\n        this._attachToAttacher(attacher, schema_name, schema, services_to, options);\r\n    }\r\n\r\n    _attachToAttacher(attacher, schema_name, schema, services_to, options){\r\n        let self = this;\r\n        let current_service = this.service_name;\r\n\r\n        _.map(services_to, service=>{\r\n            attacher.attacher.create(`create_${schema_name}_from_${current_service}_for_${service}`, schema_name, current_service, service, schema, self, options)\r\n            attacher.attacher.update(`update_${schema_name}_from_${current_service}_for_${service}`, schema_name, current_service, service, schema, self, options)\r\n            attacher.attacher.delete(`delete_${schema_name}_from_${current_service}_for_${service}`, schema_name, current_service, service, schema, self, options)\r\n        })\r\n    }\r\n\r\n    // Get all services name and map it into single array\r\n    _servicesToMapper(services_to){\r\n        return _(services_to).map(service => {\r\n            if (_.isPlainObject(service)) {\r\n                if (service.name) {\r\n                    return service.name;\r\n                }\r\n                throw new Error('Name is not defined in object');\r\n            }\r\n            return service;\r\n        }).value(); \r\n    }\r\n\r\n    /**\r\n     * Receiver from model entity\r\n     */\r\n    modelReceive(receiver){\r\n        receiver._init(this);\r\n    }\r\n    \r\n}"]}