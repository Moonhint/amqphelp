{"version":3,"sources":["../../app/helpers/action.helper.js"],"names":["MessagingAction","constructor","settings","utils","MessagingChannel","successful_rpc","ping_count","retry_rpc","stringify_payload","send","queue_name","queue_message","undefined","Error","self","channel","create","connection","host","options","user","pass","assertQueue","output","JSON","stringify","the_queue","sendToQueue","Buffer","process","env","NODE_ENV","console","log","receive","callback","TypeError","consume","msg","ack","parse","content","toString","create_task","payload","durable","persistent","queue_worker","prefetch","ch","noAck","rpc_client","correlationId","response_activity","q","exclusive","queue","properties","replyTo","rpc_server","activity","reply","publish","exchange_name","exchange_message","assertExchange","subscribe","bindQueue","ping","ping_interval","npm_package_name","interval","setInterval"],"mappings":"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","file":"action.helper.js","sourcesContent":["//TODO:: Add deeper unit test on subscribe, publish and ping\r\nexport class MessagingAction {\r\n\r\n  // Depedency Injection:\r\n  constructor({ settings, utils, MessagingChannel, successful_rpc } = {}) {\r\n    // a service for handling AMQP channel creation\r\n    this.MessagingChannel = MessagingChannel;\r\n\r\n    // configuration settings\r\n    this.settings = settings;\r\n\r\n    // messaging utilities function helper\r\n    this.utils = utils || null;\r\n\r\n    // other tracked parameters\r\n    this.ping_count = 0;\r\n    this.retry_rpc = 0;\r\n    this.successful_rpc = successful_rpc || false;\r\n    this.stringify_payload;\r\n  }\r\n\r\n  /**\r\n   * async send - send simple payload to specify queue,\r\n   *              used together with async RECEIVE\r\n   * @param  {String} queue_name      queue name\r\n   * @param  {Any} queue_message      the payload\r\n   * @return {Promise}                promise of true\r\n   */\r\n  async send(queue_name, queue_message){\r\n\r\n    if(queue_name === undefined || queue_message === undefined){\r\n      throw new Error('Queue name and queue message is undefined')\r\n    }\r\n\r\n    let self = this;\r\n\r\n    let channel = await this.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    await channel.assertQueue(queue_name);\r\n\r\n    let output = JSON.stringify(queue_message);\r\n\r\n    let the_queue = channel.sendToQueue(queue_name, new Buffer(output));\r\n\r\n    if (process.env.NODE_ENV !== \"test\") console.log(`[o] Sent '${output}'`);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * async receive - receive simple payload from the queue,\r\n   *                 used together with async SEND\r\n   * @param  {String} queue_name    queue name\r\n   * @param  {Function} callback    callback function with params(payload)\r\n   */\r\n  async receive(queue_name, callback){\r\n\r\n    if(!queue_name || !callback){\r\n      throw new TypeError()\r\n    }\r\n\r\n    let self = this;\r\n\r\n    let channel = await this.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    await channel.assertQueue(queue_name);\r\n    channel.consume(queue_name, function(msg) {\r\n      if (msg !== null) {\r\n        channel.ack(msg);\r\n        callback(JSON.parse(msg.content.toString()));\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * async create_task - request some task to be done, not waiting for the result,\r\n   *                     but will try to recover task if worker failed to process the work,\r\n   *                     used to together with create_task\r\n   *\r\n   * @param  {type} queue_name=null description\r\n   * @param  {type} payload=null    description\r\n   * @param  {type} durable=true    description\r\n   * @param  {type} persistent=true description\r\n   * @return {type}                 description\r\n   */\r\n  async create_task(queue_name=null, payload=null, durable=true, persistent=true){\r\n\r\n    if(queue_name===null || payload===null){\r\n      throw new Error('Queue name and payload is required, as first and second params');\r\n    }\r\n\r\n    let self = this;\r\n    let channel = await this.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    await channel.assertQueue(queue_name, {durable: durable});\r\n\r\n    this.stringify_payload = JSON.stringify(payload);\r\n\r\n    let the_queue = channel.sendToQueue(queue_name, new Buffer(this.stringify_payload), {persistent: persistent});\r\n  }\r\n\r\n  /**  \r\n   * async queue_worker - setup service worker for processing some task,\r\n   *                      used to together with create_task\r\n   *\r\n   * @param  {type} queue_name=null description\r\n   * @param  {type} prefetch=3      description\r\n   * @param  {type} durable=true    description\r\n   * @return {type}                 description\r\n   */\r\n  async queue_worker(queue_name=null, prefetch=3, durable=true){\r\n\r\n    if(queue_name===null){\r\n      throw new Error('Queue name is required, as the first params');\r\n    }\r\n\r\n    let self = this;\r\n    let channel = await this.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    await channel.assertQueue(queue_name, {durable: durable});\r\n\r\n    channel.prefetch(prefetch);\r\n\r\n    channel.consume(queue_name, function(msg) {\r\n      if (msg !== null) {\r\n        // events[queue_name](msg.content);\r\n        ch.ack(msg);\r\n      }\r\n    }, {noAck: false});\r\n  }\r\n\r\n\r\n  /**\r\n   * async rpc_client - request some task to be done from rpc_server and wait for the result,\r\n   *                    used together with rpc_server\r\n   *\r\n   * @param  {String} queue_name=null           description\r\n   * @param  {Any} payload=null                 description\r\n   * @param  {String} correlationId=null        description\r\n   * @param  {Function} response_activity=null  description\r\n   */\r\n  async rpc_client(queue_name=null, payload=null, correlationId=null, response_activity=null){\r\n\r\n    if(queue_name===null || payload===null){\r\n      throw new Error('Queue name and payload is required, as first and second params');\r\n    }\r\n\r\n    if(correlationId===null || response_activity===null){\r\n      throw new Error('correlationId and response_activity is required, as third and fourth params');\r\n    }\r\n\r\n    let self = this;\r\n\r\n    let channel = await self.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    let q = await channel.assertQueue('', {exclusive: true});\r\n\r\n    channel.consume(q.queue, async function(msg) {\r\n      if (msg.properties.correlationId === correlationId) {\r\n        await response_activity(msg, channel);\r\n        self.successful_rpc = true;\r\n      }\r\n    }, {noAck: true});\r\n\r\n    self.stringify_payload = JSON.stringify(payload);\r\n\r\n    let the_queue = channel.sendToQueue(queue_name, new Buffer(self.stringify_payload),\r\n                                                    { correlationId: correlationId, replyTo: q.queue });\r\n\r\n  }\r\n\r\n  /**\r\n   * async rpc_server - setup service service server for processing some task then give response immediately after finished,\r\n   *                    used together with rpc_client\r\n   *\r\n   * @param  {type} queue_name=null description\r\n   * @param  {type} activity=null   description\r\n   * @param  {type} prefetch=3      description\r\n   * @return {type}                 description\r\n   */\r\n  async rpc_server(queue_name=null, activity=null, prefetch=3){\r\n    if(queue_name===null || activity===null){\r\n      throw new Error('Queue name and activity is required, as the first and second params');\r\n    }\r\n\r\n    let self = this;\r\n    let channel = await this.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    await channel.assertQueue(queue_name, {durable: false});\r\n\r\n    channel.prefetch(prefetch);\r\n\r\n    channel.consume(queue_name, async function reply(msg) {\r\n      await activity(msg, channel);\r\n    });\r\n\r\n  }\r\n\r\n  async publish(exchange_name, exchange_message){\r\n    let self = this;\r\n\r\n    let channel = await this.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    channel.assertExchange(exchange_name, 'fanout', {durable: false});\r\n\r\n    let output = JSON.stringify(exchange_message);\r\n\r\n    channel.publish(exchange_name, '', new Buffer(output));\r\n\r\n    console.log(`[o] sent '${output}'`)\r\n\r\n    return true;\r\n  }\r\n\r\n  async subscribe(exchange_name, callback){\r\n    let self = this;\r\n\r\n    let channel = await this.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    channel.assertExchange(exchange_name, 'fanout', {durable: false}) \r\n\r\n    let queue_name = await channel.assertQueue('', {exclusive: true})\r\n\r\n    await channel.bindQueue(queue_name.queue, exchange_name, '')\r\n\r\n    channel.consume(queue_name.queue, msg=>{\r\n      callback(JSON.parse(msg.content.toString()))\r\n    }, {noAck: true})\r\n  }\r\n\r\n  async ping(ping_interval = 3000){\r\n    let self = this;\r\n\r\n    let queue_name = `${process.env.npm_package_name}_heartbeat`\r\n\r\n    let interval = await setInterval(async ()=>{\r\n\r\n      self.ping_count++;\r\n\r\n      await this.publish(`${process.env.npm_package_name}_heartbeat`, 'beat')\r\n\r\n    }, ping_interval)\r\n\r\n    return interval;\r\n  }\r\n\r\n};\r\n"]}