{"version":3,"sources":["../../app/helpers/action.helper.js"],"names":["MessagingAction","constructor","settings","utils","MessagingChannel","successful_rpc","ping_count","retry_rpc","stringify_payload","ping","ping_message","ping_interval","self","channel","create","connection","host","options","user","pass","queue_name","process","env","npm_package_name","assertQueue","interval","setInterval","the_queue","sendToQueue","Buffer","NODE_ENV","console","log","send","queue_message","undefined","Error","create_task","payload","durable","persistent","JSON","stringify","queue_worker","prefetch","consume","msg","ch","ack","noAck","rpc_client","correlationId","response_activity","q","exclusive","queue","properties","replyTo","rpc_server","activity","reply","receive","callback","TypeError","parse","content","toString","subscribe","info"],"mappings":"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","file":"action.helper.js","sourcesContent":["export class MessagingAction {\r\n\r\n  // Depedency Injection:\r\n  constructor({ settings, utils, MessagingChannel, successful_rpc } = {}) {\r\n    // a service for handling AMQP channel creation\r\n    this.MessagingChannel = MessagingChannel;\r\n\r\n    // configuration settings\r\n    this.settings = settings;\r\n\r\n    // messaging utilities function helper\r\n    this.utils = utils || null;\r\n\r\n    // other tracked parameters\r\n    this.ping_count = 0;\r\n    this.retry_rpc = 0;\r\n    this.successful_rpc = successful_rpc || false;\r\n    this.stringify_payload;\r\n  }\r\n\r\n  async ping(ping_message, ping_interval=3000){\r\n    let self = this;\r\n\r\n    let channel = await this.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    let queue_name = `${process.env.npm_package_name}_heartbeat`;\r\n\r\n    await channel.assertQueue(queue_name);\r\n\r\n    let interval = setInterval(async function () {\r\n      let the_queue = channel.sendToQueue(queue_name, new Buffer(`${ping_message} ${self.ping_count}`));\r\n\r\n      if (process.env.NODE_ENV !== \"test\") console.log(`[o] Sent '${ping_message} ${self.ping_count}'`);\r\n\r\n      self.ping_count++;\r\n    }, ping_interval);\r\n\r\n    return interval;\r\n  }\r\n\r\n\r\n  async send(queue_name, queue_message){\r\n\r\n    if(queue_name === undefined || queue_message === undefined){\r\n      throw new Error('Queue name and queue message is undefined')\r\n    }\r\n\r\n    let self = this;\r\n\r\n    let channel = await this.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    await channel.assertQueue(queue_name);\r\n\r\n    let the_queue = channel.sendToQueue(queue_name, new Buffer(`${queue_message}`));\r\n\r\n    if (process.env.NODE_ENV !== \"test\") console.log(`[o] Sent '${queue_message}'`);\r\n\r\n    return true;\r\n  }\r\n\r\n  async create_task(queue_name=null, payload=null, durable=true, persistent=true){\r\n\r\n    if(queue_name===null || payload===null){\r\n      throw new Error('Queue name and payload is required, as first and second params');\r\n    }\r\n\r\n    let self = this;\r\n    let channel = await this.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    await channel.assertQueue(queue_name, {durable: durable});\r\n\r\n    this.stringify_payload = JSON.stringify(payload);\r\n\r\n    let the_queue = channel.sendToQueue(queue_name, new Buffer(this.stringify_payload), {persistent: persistent});\r\n  }\r\n\r\n  async queue_worker(queue_name=null, prefetch=3, durable=true){\r\n\r\n    if(queue_name===null){\r\n      throw new Error('Queue name is required, as the first params');\r\n    }\r\n\r\n    let self = this;\r\n    let channel = await this.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    await channel.assertQueue(queue_name, {durable: durable});\r\n\r\n    channel.prefetch(prefetch);\r\n\r\n    channel.consume(queue_name, function(msg) {\r\n      if (msg !== null) {\r\n        // events[queue_name](msg.content);\r\n        ch.ack(msg);\r\n      }\r\n    }, {noAck: false});\r\n  }\r\n\r\n  async rpc_client(queue_name=null, payload=null, correlationId=null, response_activity=null){\r\n\r\n    if(queue_name===null || payload===null){\r\n      throw new Error('Queue name and payload is required, as first and second params');\r\n    }\r\n\r\n    if(correlationId===null || response_activity===null){\r\n      throw new Error('correlationId and response_activity is required, as third and fourth params');\r\n    }\r\n\r\n    let self = this;\r\n\r\n    let channel = await self.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    let q = await channel.assertQueue('', {exclusive: true});\r\n\r\n    channel.consume(q.queue, async function(msg) {\r\n      if (msg.properties.correlationId === correlationId) {\r\n        await response_activity(msg, channel);\r\n        self.successful_rpc = true;\r\n      }\r\n    }, {noAck: true});\r\n\r\n    self.stringify_payload = JSON.stringify(payload);\r\n\r\n    let the_queue = channel.sendToQueue(queue_name, new Buffer(self.stringify_payload),\r\n                                                    { correlationId: correlationId, replyTo: q.queue });\r\n\r\n  }\r\n\r\n  async rpc_server(queue_name=null, activity=null, prefetch=3){\r\n    if(queue_name===null || activity===null){\r\n      throw new Error('Queue name and activity is required, as the first and second params');\r\n    }\r\n\r\n    let self = this;\r\n    let channel = await this.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    await channel.assertQueue(queue_name, {durable: false});\r\n\r\n    channel.prefetch(prefetch);\r\n\r\n    channel.consume(queue_name, async function reply(msg) {\r\n      await activity(msg, channel);\r\n    });\r\n\r\n  }\r\n\r\n  async receive(queue_name, callback){\r\n    if(!queue_name || !callback){\r\n      throw new TypeError()\r\n    }\r\n    let self = this;\r\n\r\n    let channel = await this.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    await channel.assertQueue(queue_name);\r\n    channel.consume(queue_name, function(msg) {\r\n      if (msg !== null) {\r\n        channel.ack(msg);\r\n        callback(JSON.parse(msg.content.toString()));\r\n      }    \r\n    });\r\n\r\n  }\r\n\r\n  //DEPRECATED: renamed to receive\r\n  async subscribe(queue_name, callback){\r\n    let self = this;\r\n\r\n    let channel = await this.MessagingChannel.create(\r\n      this.settings.connection.host,\r\n      this.settings.connection.options.user,\r\n      this.settings.connection.options.pass\r\n    );\r\n\r\n    await channel.assertQueue(queue_name);\r\n    channel.consume(queue_name, function(msg) {\r\n      if (msg !== null) {\r\n        console.info(msg.content.toString());\r\n        // events[queue_name](msg.content);\r\n        channel.ack(msg);\r\n        callback(msg);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n};\r\n"]}