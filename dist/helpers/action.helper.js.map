{"version":3,"sources":["../../app/helpers/action.helper.js"],"names":["MessagingAction","constructor","settings","utils","MessagingChannel","successful_rpc","ping_count","retry_rpc","stringify_payload","ping","ping_message","ping_interval","self","channel","create","connection","host","options","user","pass","queue_name","process","env","npm_package_name","assertQueue","interval","setInterval","the_queue","sendToQueue","Buffer","NODE_ENV","console","log","create_task","payload","durable","persistent","Error","JSON","stringify","queue_worker","prefetch","consume","msg","ch","ack","noAck","rpc_client","correlationId","response_activity","q","exclusive","queue","properties","replyTo","rpc_server","activity","reply","subscribe","info","content","toString"],"mappings":"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","file":"action.helper.js","sourcesContent":["export class MessagingAction {\n\n  // Depedency Injection:\n  constructor({ settings, utils, MessagingChannel, successful_rpc } = {}) {\n    // a service for handling AMQP channel creation\n    this.MessagingChannel = MessagingChannel;\n\n    // configuration settings\n    this.settings = settings;\n\n    // messaging utilities function helper\n    this.utils = utils || null;\n\n    // other tracked parameters\n    this.ping_count = 0;\n    this.retry_rpc = 0;\n    this.successful_rpc = successful_rpc || false;\n    this.stringify_payload;\n  }\n\n  async ping(ping_message, ping_interval=3000){\n    let self = this;\n\n    let channel = await this.MessagingChannel.create(\n      this.settings.connection.host,\n      this.settings.connection.options.user,\n      this.settings.connection.options.pass\n    );\n\n    let queue_name = `${process.env.npm_package_name}_heartbeat`;\n\n    await channel.assertQueue(queue_name);\n\n    let interval = setInterval(async function () {\n      let the_queue = channel.sendToQueue(queue_name, new Buffer(`${ping_message} ${self.ping_count}`));\n\n      if (process.env.NODE_ENV !== \"test\") console.log(`[o] Sent '${ping_message} ${self.ping_count}'`);\n\n      self.ping_count++;\n    }, ping_interval);\n\n    return interval;\n  }\n\n  async create_task(queue_name=null, payload=null, durable=true, persistent=true){\n\n    if(queue_name===null || payload===null){\n      throw new Error('Queue name and payload is required, as first and second params');\n    }\n\n    let self = this;\n    let channel = await this.MessagingChannel.create(\n      this.settings.connection.host,\n      this.settings.connection.options.user,\n      this.settings.connection.options.pass\n    );\n\n    await channel.assertQueue(queue_name, {durable: durable});\n\n    this.stringify_payload = JSON.stringify(payload);\n\n    let the_queue = channel.sendToQueue(queue_name, new Buffer(this.stringify_payload), {persistent: persistent});\n  }\n\n  async queue_worker(queue_name=null, prefetch=3, durable=true){\n\n    if(queue_name===null){\n      throw new Error('Queue name is required, as the first params');\n    }\n\n    let self = this;\n    let channel = await this.MessagingChannel.create(\n      this.settings.connection.host,\n      this.settings.connection.options.user,\n      this.settings.connection.options.pass\n    );\n\n    await channel.assertQueue(queue_name, {durable: durable});\n\n    channel.prefetch(prefetch);\n\n    channel.consume(queue_name, function(msg) {\n      if (msg !== null) {\n        // events[queue_name](msg.content);\n        ch.ack(msg);\n      }\n    }, {noAck: false});\n  }\n\n  async rpc_client(queue_name=null, payload=null, correlationId=null, response_activity=null){\n\n    if(queue_name===null || payload===null){\n      throw new Error('Queue name and payload is required, as first and second params');\n    }\n\n    if(correlationId===null || response_activity===null){\n      throw new Error('correlationId and response_activity is required, as third and fourth params');\n    }\n\n    let self = this;\n\n    let channel = await self.MessagingChannel.create(\n      this.settings.connection.host,\n      this.settings.connection.options.user,\n      this.settings.connection.options.pass\n    );\n\n    let q = await channel.assertQueue('', {exclusive: true});\n\n    channel.consume(q.queue, async function(msg) {\n      if (msg.properties.correlationId === correlationId) {\n        await response_activity(msg, channel);\n        self.successful_rpc = true;\n      }\n    }, {noAck: true});\n\n    self.stringify_payload = JSON.stringify(payload);\n\n    let the_queue = channel.sendToQueue(queue_name, new Buffer(self.stringify_payload),\n                                                    { correlationId: correlationId, replyTo: q.queue });\n\n  }\n\n  async rpc_server(queue_name=null, activity=null, prefetch=3){\n    if(queue_name===null || activity===null){\n      throw new Error('Queue name and activity is required, as the first and second params');\n    }\n\n    let self = this;\n    let channel = await this.MessagingChannel.create(\n      this.settings.connection.host,\n      this.settings.connection.options.user,\n      this.settings.connection.options.pass\n    );\n\n    await channel.assertQueue(queue_name, {durable: false});\n\n    channel.prefetch(prefetch);\n\n    channel.consume(queue_name, async function reply(msg) {\n      await activity(msg, channel);\n    });\n\n  }\n\n  // async publish(queue_name, the_obj){\n  //\n  //   let self = this;\n  //   let channel = await this.MessagingChannel.create(\n  //      this.settings.connection.host,\n  //      this.settings.connection.options.user,\n  //      this.settings.connection.options.pass\n  //   );\n  //\n  //   await channel.assertQueue(queue_name);\n  //\n  //   let queue = ch.sendToQueue(queue_name, new Buffer(JSON.stringify(the_obj)));\n  //   console.log(`[to ${queue_name}] Sent ${the_obj}`);\n  //   return queue;\n  // }\n\n  async subscribe(queue_name){\n\n    let self = this;\n\n    let channel = await this.MessagingChannel.create(\n      this.settings.connection.host,\n      this.settings.connection.options.user,\n      this.settings.connection.options.pass\n    );\n\n    await channel.assertQueue(queue_name);\n    channel.consume(queue_name, function(msg) {\n      if (msg !== null) {\n        console.info(msg.content.toString());\n        // events[queue_name](msg.content);\n        channel.ack(msg);\n      }\n    });\n\n  }\n\n};\n"]}